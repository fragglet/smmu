25-7-1999
============================================================================
It's my birthday! =). Anyway, I promised that I'd release a public beta of
SMMU as a 'birthday beta'. Thought it would be sensible to bring the
changelog up to date too.

* hu_over.c added which contains the re-written 'overlay hud': ie. the
  mini display which you see when you put it in fullscreen. I have made
  a seperate module and basically just re-written the boom one. There are
  a number of differences however, most notably that the titles (eg "health",
  "armor" etc) are always white, and that the full names are given: eg:
  "health" not "hel"

* crosshair changed: now blue when pointing at friends. Also goes translucent
  when there is no target to be less distracting.

* demo 'walkcam' added which allows you to walk around levels while they are
  playing. I'm not sure whether this needs to be improved or not. Currently,
  you can walk through walls. May need some improving.

* FraggleScript update: I now have it running functions properly, although
  there are currently only 2 functions: "print" and "rnd". However, I think
  all that I need to do is add loops/gotos and then I can start integrating
  it into SMMU.

* d_net.c / d_main.c changed. TryRunTics is now run regardless of whether
  singletics is true or false. All the syncronous update stuff is now done
  in TryRunTics. This also means that the console and menu always run at the
  right speed regardless of the demo speed.

* console command buffers added so that console commands are no longer run
  instantly. This means that wads are now loaded 100% reliably. Also, the
  bug with parts of the rendering appearing after changing video modes is
  also fixed.

* Support for Doom I wads under Doom II. This is really cool. When it cannot
  find a texture on loading a level, it tries translating the texture into
  a Doom II texture (assumes it is a Doom I texture).  

* Got the current version of the start map from derek. This led to me making
  the first change to the sound code. I noticed that the 3-D bridge 'clunked'
  as you walked over/under it. I decided to implement the boom sector flags
  which were designed to silence all moving sector sounds but were never
  implemented. Modified the start map to try it out, and it worked fine.
  The other sector flag was to silence all sound in a sector which now also
  works.

* The walkcam is the reason which led me to make the second change to the
  sound code. Under the walkcam, as you walked around you would still hear
  from the displayplayer's viewpoint rather than the camera. Some changes in
  s_sound.c to make you hear from the camera instead.

* fixed the disk icon which was 16x16, not 16x15 as the graphic actually is.
  also offset wrongly. original doom had the same bug.

* Sent derek a beta about a week/2 ago. He pointed out a number of bugs
  which I quickly fixed:
        - crashing in dos (a null pointer being dereferenced in the camera
                sound code)
        - loading wads using the 'map' command: like in legacy. you can now
                do "map gothicdm.wad" and it will load gothicdm.wad and warp
                to the first level.

* menu code changed so that if there is a start map, you start there rather
  than on map01.

* skins fixed where once dying, the player would revert to the standard doom
  skin. Fixed by adding a skin_t pointer in the mobj_t itself, which solved
  the problem (once you die, the player_t * in your mobj is cleared, so it
  no longer knew you were supposed to be a different skin)
  This also led to a further problem: your body being crushed would change
  you to a standing marine rather than a pool of blood (works by setting
  your spritenum to the blood sprite and setting your sprite subnum to 0..
  this meant that the spritenum was being set back to the skin spritenum
  which left you as a standing person). Fixed.

* Although the v_video.c 'loading' code put dots on the screen in text mode,
  it did not draw the bounding [ ] brackets. This was still being done in
  r_data.c. I moved the brackets to v_video.c and fixed it

* d_main.c changed so that it no longer clears the screen. You can now see
  how much memory has been allocated, etc. Also, in devparm mode it pauses
  before setting graphics mode so you can read the messages.

==============================================================================
21-6-1999

The exams are over.. wohoo! Anyway, I have also been doing work on SMMU
during the exam period, I managed to do a few things to it.

* The most important point to mention is that Derek MacDonald('Afterglow')
  and Bob Satori('Mantic') have agreed to help me after the plea for help
  on my webpage. Afterglow is a great level designer, I have seen some of
  his SacrificeDM levels and they're great. Also, Satori is obviously a
  very talented artist. He has sent me a sketch of a new title screen
  he is designing for SMMU: set several seconds after the doom 2 title where
  the marine is taking on the Cyberdemon hand-to-hand. He also sent me
  640x400 versions of the doom I and II title screens which I have now
  implemented into SMMU for hires mode.

* Improved console. Most important is the introduction of C_Printf which
  basically makes C_WriteText redundant. I have kept C_WriteText as a
  #defined version of C_Puts for backward compatibility.

  The other thing is the console network commands. I have changed the system.
  Instead of sending the console entry number in the command list when
  sending netcmds, it now sends a special unique netcmd number. There is
  an enum in c_net.h, each command has an individual number/define. These
  are then included in the command list and used for sending network commands.
  This system is vital for when I break up the command list

  Also, fixed: command history which recorded 'empty' commands

* Fixed a network demo problem which was causing inconsistancies. It was
  basically due to code in g_game.c which I had added to implement the
  way in which whole ticcmds are used to transfer console commands when the
  game is in console mode (mainly at startup). Various checks have to be
  skipped, most importantly, consistancy checks, and also checks for pausing
  the game. The whole-ticcmd system is still rather unstable, which is why
  I have added #ifdefs to comment out all the code which implements this.
  It is slower to start up, but more reliable.

* Added all the neccesary console commands for monster behaviour, friends
  etc. which means that all the neccesary data (i think) for netgames is
  now sent. Under the boom code, SMMU runs in compatibility mode (again, I
  think) so the compatibility data probably does not need to be sent.

* Noticed another bug in SMMU, the console does not change the 'default_'
  versions of game variables. Because of this, if you change variables in
  the console, they will not be saved to the .cfg file. I should fix this
  eventually, but I would rather wait until I have properly split up the
  command list until I do this.

* A rather drastic change to the wad loading. The 'lumpinfo' array is now
  an array of 'lumpinfo_t *'s rather than 'lumpinfo_t's. This is primarily
  for dynamic wad loading. The problem with the wad loading was that it was
  slow, mainly because with each new wad loaded, the lumpcache was cleared.
  I realised that for reliable dynamic wad loading, it was going to be
  neccesary to put the cache pointer inside the lumpinfo_t. So I did.
  Unfortunately, all wad entries loaded with PU_CACHE messed up, as when
  they were cleared from memory, the zone memory code went into the
  lumpinfo_t (which had been moved -- coalescing marked resources),
  and cleared the pointer for the wrong lumpinfo_t. Basically, all the
  pointers got messed up. Under the new system, the lumpinfo_t is not moved
  in memory, instead only the pointer to it is moved in the list, so it
  works fine.

  The new system loads wads much more reliably, although there are _still_
  some problems with it. The addfile command is called by the console
  responder, which is called from NetUpdate, which can be called at any
  time, including _during_ the rendering process if the game is in a
  level. Doom gets half way through rendering the scene, then loads a wad,
  then goes to draw the rest and messes up because things have changed.
  I need to buffer the console commands so that they will run in the ticker
  rather than during the rendering process.

* FraggleScript is coming along nicely. I have it at quite an impressive
  level already. A list of what it already does:
        - Parses code correctly, breaks up code into tokens
        - All the main C operators: ==, &, |, *, /, +, -, %, etc.
        - Orders of precedence, eg 3+4*2 = 3+(4*2) not (3+4)*2
        - Multi-level nested brackets
        - Comments
        - Variables: the structure is there but not fully implemented yet.
  All the structure for creating a complete language is there. It can
  already evaluate fairly complex expressions, such as
        2*((2+3)*(3+9) + 1)
  which it correctly evaluates as 122.

* multi-line scripting. Under the old scripting, you could only have one
  line for scripts. The new system requires you to place 'startscript'...
  'endscript' markers around your script, but allows you to have as many
  lines as you want and as big a script as you want. t_script.c added for
  some script functions (clear scripts, console dump and run commands)
  which will also be useful in the eventual transition to FraggleScript.

* Removed the predefined lumps, placed them in a seperate file. The lumps
  were really getting too big, especially with the prospect of 640x400
  title screens. I have #ifdefed out all the code, to re-enable add
  #define USEPREDEFINES somewhere or use compiler switches.

* Improved frag scores counter. Now shows your colour, right aligns names,
  highlights your name in white.

* Better network random seeds: a seed is created by the key player and sent
  to all the other players rather than using a fixed number.

* Fixed chasecam bug, where the chasecam would be miles outside the level.
  It was because of the displayplayer variable being reset without informing
  the chasecam code. The chasecam has also been improved slightly: if you
  walk backwards into a wall, the chasecam gradually ducks down, so you
  can see the player. Also, when the chasecam is turned off, it moves inside
  the player's head, rather than instantly turning off. prjboom inspired.
  (at least that port was useful for something)  

* c_docmd.c renamed c_runcmd.c because it sounds better =)

==============================================================================
7-6-1999

A bit of stuff done in the past couple of weeks, but I haven't been doing
much. The exams are coming up, so this means that I'm either gonna revise
heavily during all my spare time or fuck around playing doom and stuff.
I _really do_ want to get some good revision done and I hope I can
concentrate enough to do it.

Anyway.

* New player colours. Old system of player colour map generation made more
  generalised: the code is in r_draw.c (as before) but uses a table-based
  approach now instead of seperate code for each colour. TRANSLATIONCOLOURS
  #define added to r_draw.h, c_handle.c changed appropriately (c_colour).

  Changes also made to st_stuff.c for the player statusbar background. It
  now uses colourmaps for a single patch instead of a different patch
  for each colour.

* Heads up finished. 'message' char * pointer removed from player_t as I
  think that this is a rather tacky way to do messages. Use dprintf from
  now on.

* Updated my page, including details of what will be in the next version
  of SMMU and what the doom community can expect to see in it in the future.
  I've done a lot over the past few months, but when I list it, it doesn't
  actually look that much greater than the previous version =(. Anyway,
  I should release a beta soon.

  I also appealed for help from graphics artists to help me with SMMU.
  I've been badgering mystican to do me some graphics for a few weeks, but
  to no avail. Hopefully some kind souls will respond to my pleas =). I
  appealed for some kick-ass level makers to make me a start map and a
  demo wad.

* Downloaded the TCP/IP Library, libsocket, which is designed (i think)
  to use the same format (codewise) for network calls as linux / unix.
  Myst said that I should do a linux version of SMMU which I am inclined
  to agree would kick ass. My own disastrous experiences with linux, however,
  have led me to believe that I am not currently anywhere near experienced
  enough to undertake a port to linux. Perhaps if SMMU becomes popular
  enough (I can dream, ok..) then someone will do a linux port for me.

  Anyway, I managed to muddle/code a kind of web-server type thing which
  sent responses back to netscape just fine. I need to write some basic
  send/receive programs to properly familiarise myself with the library.
  One thing I'm considering is writing a mock 'start game/join game'
  program where you could start a server and have other nodes join it,
  and it would go all the way up to the point where the game would start
  before exiting. If I can do that and tackle any problems it may give me
  then it should make doing the real thing in SMMU a bit easier.

* Fixed the rendering bug which meant that entire middle textures were drawn
  even when they should not be (a clipping bug: texture overlapped the floor)
  All it needed was a couple of lines of code to r_segs.c to fix. You could
  always fix this in original doom by setting the adjacent sectors to
  slightly different lightlevels, but this was a bug which always pissed
  me off =). My only real concern is that this may affect compatibility.

* Added ver_date console command (date of compile). Also added a 'version
  name' (ver_name at console). This version is called 'chadwick' after
  19th Century Poor Law Guardian Edwin Chadwick.

* I'm becoming steadily dis-satisfied with various bits of the console but
  I don't think that it needs a complete re-write like the heads-up did.
  The basic I/O definitely needs a major re-work. The current function
  'C_WriteText' always adds a new line at a time. What I am aiming for is
  more toward a 'C_Printf' style thing where '\n's could be put into the
  text to start a new line. This would undoubtedly be more elegant, and
  also would allow text to overflow from lines onto the next line.

  The other main annoyance is the command 'list'. I would much prefer to
  replace this with a dynamic system of individual program module groups
  (eg heads up, status bar, game etc) submitting their own commands instead
  of all the commands being in a static list. This would entrust the commands
  to their appropriate modules. I have already divided the commands in
  c_cmdlst.c into categories which may make help the process. This may cause
  shake-ups, however, most significantly in tab-completion and network
  commands. A change of this kind would also allow for hash-lookup tables
  which would speed up searching for commands (perhaps important if the menu
  and game controls soon become console-based)

** MY REAL AIMS FOR THE FUTURE OF SMMU **

I thought this might be prudent to show just where I'm going with this port.
The main features I plan to add:

* Client-server games. I have some clear ideas how to do this in my head,
  though I wouldn't like to try to explain it here. Essential for any
  decent network games.

* TCP/IP support. The obvious one. I already have the library. I want this
  to be possible once the game has begun. The current system of command
  lines and seperate network programs I find tedious and dated. We should
  not need any more to quit the game just to have start the game again.

  What I am aiming for is not a dynamic system of game joining like in
  Quake, as I think that this would be much too difficult. I'll leave that
  to dmDoom =). What I aim for is a Descent-style system: you start a server,
  then wait for other players to join, seeing them on a list as they join.
  You can then start the game once you have a few players.

  On the other hand, I do not intend to remove the old system as I think
  the old system is still fine as it is.

* FraggleScript. The current scripting system of using console commands is
  frankly not enough for any decent scripting. I have, as mentioned, already
  started on a parser for a C-style language I have named 'FraggleScript'.
  It is still, however, in its very basic stages.

* New menu system. The menu system is old and not designed to do what I want
  to do with it. TeamTNT have attempted to build on the existing structure
  but I would far rather knock it down and start again. Basically, the main
  problem with the menu is that the options in it are way behind the rest of
  the program.

* Fix the things I have/ have probably broken:
        - Savegames (might not be too bad)
        - Demos (totally fucked)

==============================================================================
23-5-1999

Ok, I haven't updated this thing in far too long (2 months!), however I have
managed to do a considerable amount in this period of time..

* Console command running heavily improved, basically almost rewritten.
  The handlers are now of the form void func(void) rather than
  void func(char *). Instead of being passed a plain string of text which
  the user gave on the command line, the command line is now broken down
  into 'tokens' (or individual words). There are new variables for this
  in c_docmd.c: c_argv, c_argc, c_args: the tokens, number of them, and
  the plain string respectively.

* I have started rewriting the heads-up code. So far there is only the basic
  text: 'picked up a clip' etc. I moved all the code for loading the font
  and displaying lines of text into v_video.c: V_LoadFont, V_WriteText etc.
  It supports coloured text by characters above 128 in the string, each
  character corresponds to a different colour. #defines in v_video.h to
  make colouring text strings easier. I hope to finish the heads up code
  in the next few weeks, then I'll release this version. The headsup is the
  only major thing left to do.

* D_NewWadLumps added in d_main.c which is called whenever a new wad is
  loaded. It checks through all the new lumps and keeps a look out for
  interesting ones: 'dehacked' is one. Also, all sound lumps (beginning 'ds')
  which it then tells s_sound.c to flush from memory. Now when you load a
  wad, the correct sounds are played.

* I have fully implemented doom legacy skins. New console commands:
  'listskins' and 'skin': i'm sure you can figure them out. All the main
  skins code is in p_skin.c. Code in d_newwadlumps calls the skins code
  whenever it finds a 's_skin' resource in a new wad. This skin is parsed
  and added to the list of skins.
  - skin_t *skin added into d_player.h which points to the players
    skin (or the 'marine' variable in p_skin.c)
  - P_InitSkins is called in R_InitData which creates a list of sprite
    resource names. This includes all the skin sprites
    and the normal sprites. This new sprite list is used instead of sprnames
    (info.c) by R_InitSpriteDefs. Hence, all the sprite data needed for the
    skins is loaded. It is then a simple matter of changing which sprite is
    displayed
  - Sound is accomplished by some changes to s_sound.c. S_startsfxinfo
    checks if the sound source is a player and modifies the sound played
    according to skin.
  - The code in st_stuff.c used to load the status bar face was split into
    a seperate function which can then be used to load replacement faces.
    The face displayed by st_stuff.c is modified according to
    players[displayplayer].skin->faces

* Finale text implemented. level 'info' lump can be used to give text to
  be displayed in intermission. Code in f_finale.c modified to detect if
  the background is a 4096-byte long flat or a standard-graphic background.
  May look a bit silly if the background is <320x200 =)

* Netgames actually work. I got a new pc (x-homepc) which can actually run
  doom so I've been able to test it out over my lan. The first thing I
  found was that SMMU was using G_DeferedInitNew in the 'map' function
  which was causing it to cack up. I fixed that. Also the cmdsrc variable
  was not being set properly, so if you typed 'kill' at the console on
  any pc, it always killed player 1. fixed that. It works now more or less
  fine. I have added a whole host of new netgame console commands:
        - sv_bfgtype : currently bfg9000, classic or bouncing(may replace
                        with a 'fair bfg' as doesnt work quite right)
        - sv_bfglook : added 'sv_'
        - sv_autoaim : autoaiming toggle on/off (not per-player)
        - sv_allowmlook : added 'sv_'
        - sv_recoil : recoil on/off
        - fast/respawn : fast monsters/respawning
        - nomonsters : toggle on/off
        - nuke : works in netgames now (server only)

* Serial comms also fixed. I hooked up the two pcs with a null-modem cable
  But found that using d_arbitratenetgame was causing it to mess up so I
  disabled it. Next problem was random sync so I fixed this by making
  ResetNet() also reset the random seed to a constant number (1337 =)
  The problem remains of making sure all the computers have the same
  game variables (compatibility variable is the biggest one because of its
  'fragmented' nature). A lot of variables have become console commands so
  the problem has gone some way toward being fixed. This is something else
  I need to fix before I release. But I have been able to get the PCs
  running reliably by copying the same .cfg file to both PCs so they have
  the same variables.

* 'Swirly' quake-style water effect. I developed this as a seperate program
  and then integrated it into SMMU. It's all mostly in r_ripple.c.
  How it works is:
  __________       1. Consider a texture consisting of horizontal lines.   
                      (left). This is distorted by a sine wave which 'pushes'
  __________          lines of the texture up/down depending on x.

  /\  /\  /\       2. See the diagram? right. This is the texture after step
    \/  \/            1. The same thing is now done in the y direction as
  /\  /\  /\          well. If it was a 'grid' texture then you would see
    \/  \/            the sine wave on the horizontal and vertical lines.
                      But, well, there are limits to ascii art =).

  3. The sine wave 'moves along' the texture with time. ie. y += sin(x)
     becomes y += sin(x + kt)

  To see this much better, enable the function in r_ripple.c which draws
  lines on the flats. Then you will see.

* A half-life style crosshair which lights up green when you point it at
  enemies. 2 styles of crosshair are currently available (cross, angle).
  I'm thinking perhaps of adding 'user crosshairs' which would allow users
  to create their own crosshairs.. with their own names etc. For now, this
  will suffice.

* Quake-style intermissions camera. MT_CAMERA added to info.c. All cameras
  are caught in p_mobj.c : P_SpawnMapThing. These are then passed into
  wi_addcamera which creates a list of cameras. When the player exits the
  level, he sees a view through the camera in the background. Note that it
  is neccesary to set the view to fullscreen or you get hom in small screen
  sizes. The immediate changing of screensizes is removed during
  intermissions: see hu_stuff.c.  p_setup.c now resets the screen size
  when entering a new level.

* Chasecam - 3rd person view. It's all in p_chase.c. Note that a camera_t*
  option has been added to r_renderplayerview to allow external cameras
  such as the chasecam. The camera_t contains all the data needed about the
  view: x, y, z, angle. Might consider adding updownangle for y-shearing.
  This is also used for the intermissions camera. Console command added
  to enable/disable console. Also the P_ResetChaseCam function which resets
  the chasecam to the players position whenever the player teleports,
  respawns etc. I thought i had fixed this problem but the other day I found
  the chasecam outside the level where it had been in the previous level.
  Need to find bug and fix.

* VPO warning indicator in hu_stuff.c to warn the wad developer making wads
  for old doom when he is over-indulging in visplanes. The number of planes
  in original doom and in boom-derived ports differs, so I've had to
  approximate 128 original vps (the limit) to around 80 on the new scale.

* SMMU goes into graphics mode a bit earlier and does some of its loading
  in the console. Now you can admire the pretty pictures =). I have added
  to v_video.c a set of 'progress meter' functions which display a bar
  showing how much of the current activity has been completed. This is
  currently used only in r_init but could be used elsewhere in the game.

* New console commands:
   - animshot : animated screen shots. Usage: animshot n to take n pictures
   - r_swirl : Replace flat animating with swirly water effect. This is kind
             of a hack. However, I have also added support to choose to use
             the swirly effect through the 'animated' resource by setting
             delays between frames >65535
   - r_precache : precache levels or not. Doesn't crash the game or anything.
        Loads the levels faster but causes slowdowns when you enter new rooms.
   - r_planeview : show visplanes
   - r_stretchsky : 'r_' added
   - wipe_speed : speed of screen wipes, default 12
   - r_showgun : turn gun on/off
   - r_showhom/r_homflash : hom detector on/off and flashing/red
   - chasecam : duh.
   - lefthanded : rather cool option which flips the playersprites, making
        the player seem 'left-handed'. See r_things.c for more.
   - v_* : changed from vid_* because video things in doom are v_ not vid_
   - c_* : from con_*, ditto
   - bobbing, screensize, pause - can set from console now
   - s_precache - option not to precache sounds for speed
   - s_pitched - crappy v1.1 pitched sounds effect

* I had a go at translucent water but a number of difficulties meant that
  I eventually gave up. I need to get a clearer grasp of exactly how doom
  renders walls before I try again I think. There is still some commented
  out code scattered throughout the rendering modules. If I can get this
  to work, however, it would be damned cool, especially with the swirl
  effect too.

==============================================================================
19-3-1999

Preparing for release tommorrow hopefully, have done a number of things
over the past month:

* name now fixed on SMMU (Smack My Marine Up) - all name changes made
* Better net support
        - c_net.c added (console net commands)
        - hu_queuechatchar and hu_dequeuechatchar moved to c_net.c and
                renamed c_*
        - when in netgame, and in console gamestate, the whole ticcmd is
          used for transferring console commands, not just 'chatchar'
        - easier to set network variables: new command flag cf_netvar
          means that commands with this flag are effectively 'run' on all
          consoles across the network. No longer any need for 2 commands
          to implement network variables. See c_docmd.h
        - c_sendnetdata (sends all network variables the other pcs need
          to know) for at start of game
        - c_updatevar: sends the value of a particular variable to sync
          other pcs
* serial comms! I have modified the sersetup source and linked it into
  the smmu source, messages such as 'waiting for ring' etc are shown
  in the console. It is a bit hacked at the moment, the serial code is
  still using its own loops to check for rings etc and not the main doom
  loop. added c_update to c_io.c which just displays the console and puts
  it for screen without waiting for the doomloop, so the messages get
  displayed. serial comms currently untested.
* i sent off for and got the legacy source code, but it did not contain
  the tcp/ip code. When I eventually get it, I will integrate it in the
  same way as sersetup.
* new command flag, cf_level, all commands with it will only be run
  if gamestate==gs_level
* hu_frags.c added, sorts frags, displays heads up 'frags' rankings list
  I also plan to add a 'frads' list for the intermission =)
* key_mlook, key_lookup, key_lookdown added and implemented properly(menus)
  alwaysmlook is not in menus but can be set from console.
  key binding menus have been slightly rearranged as a result
* lumps.c seperated into lumps.c, dogs.c: dogs can now possibly be dumped
        (prefer cats)
* new internal lumps: - LAVAMAP: 'underwater' map for lava
                      - METAL: much needed flat
* chaingun sergeant shooting noise changed
* p_info.c restructured slightly: now uses char*s to hold string values
  instead of char[]s. console variable system altered in a similar way
* Intermission screens: 
        - greater par time support, logic from wi_stuff.c moved to g_game.c
          if partime==-1, the par time is not displayed.
        - interpic, level title can now be changed thru the p_info.c level
          header lump. I also plan to add a quake-style 'view of the level'
          later.
* changed back the automap colours (almost, not quite exactly original ones)
* fixed map30 bug, discovered it was the barrel frag code. commented out,
  to fix later
* fixed a _very_ annoying bug in p_map.c that had caused the game to crash:
  see there for more.
* start map almost finished, now has translucency, deep water effects etc.  
* dynamic wad loading, tho still experimental. Currently has to reload the
  entire wad directory and re-run r_init. addfile command added to console.
  The bars in the start map are still there =)

==============================================================================
22-2-1999

I spent half-term week working on sfdoom and have made quite a lot of
changes:

* predefined lumps moved to a new lumps.c from info.c
* console more-or-less finished, still need:
        - support for quote " marks for strings containing ';'s
        - long lines of text are not split over 2 lines as they should be
* levels can now be named anything: not just "mapxy" or "exmy". Can
        be warped to using console command: 'map'.
        changed some functions in g_game.c: g_initnew, g_deferedinitnew
        are now passed a char* pointing to the level name, not the
        episode, map. g_initnewnum and g_deferedinitnewnum added to do
        the job the old ones did.
        g_getmapforname and g_getnameformap added: allow you to find the
        episode, map a particular map name suggests and vice versa
* new p_info.c: which parses lumps put into the level name wad resources.
        These lumps are in the format of a simple ascii text file, hold
        data such as level console commands, level name etc. with section
        headings in square [] brackets
* greater net support: console commands can be sent across the network by
        utilising the 'chatchar' byte in every tic that used to be used
        for sending chat messages. Chat messages are now sent as console
        commands to other computers which execute them and display the
        message on screen. Some 'server' variables are more difficult to
        implement as they effectively need 2 console commands: one typed
        by the user and another internal one sent to the other pcs.
        These begin with '_'s. C_SendCmd function in c_docmd.c
        working net commands so far:
        - name (_pn, playername) colour(_pc, player colour) kill
                                                        (_pk, suicide)
        - map (_ma, change level) _cm (chat message
* level names: olo support now added. the level names from deca2 load
        fine. Any new levels otherwise appear on the automap as 'new level'.
        Checking for new levels is done by finding if the level comes from
        the iwad, not from simply checking the modifiedgame variable. New
        variable in w_wad.c to facilitate this: iwad_handle, the file handle
        of the main iwad. new variable in p_setup.c also: newlevel is 1 if
        the currently-being-played level is new or an original iwad level.
        Level names can of course be changed from the new level info lump.
* possibilities of sersetup/ipxsetup integration are looking better. I
        added a new function to d_net.c called 'ResetNet' which resets the
        internal gametic and realtic counters. I'm guessing that this
        would probably be needed to maintain sync if we're talking about
        connecting after doom has started. resetnet seems to work so far,
        i tried it out in g_checkdemostatus so that it is called whenever
        you finish a timedemo. Seems to work, no more bombing to dos
        complaining about invalid tics.
* rather unstable, perhaps because of the recently added 'levels-
        named-anything' support. It has a habit of crashing periodically
        (bombs to dos, sigsegv). If (in dos mode, not win95) i go to
        map30, noclip and kill romero, then walk backward and get killed
        by the explosions and die, it bombs to dos with 2-3 sigs.

==============================================================================
13-2-1999

I don't plan to update this daily.

Ok, I've been working on (the new version of) sfdoom for a couple of weeks
now, after getting the initial mbf source code off the net. Lee Killough
is surely the doom programming god :). This is hopefully gonna be kind of
like legacy, multiplayer orientated, except I'll release the sources, and
it will support boom/mbf editing options.

Heres what I've done so far:

* Deathmatch III! '-trideath' cmd-line parameter
        - Weapons don't respawn, other items do. Great for fast DM.
        - Barrels respawn, barrel frags work (shooting barrels to cause
                chain reactions to kill other players earns you frags)
                'barrels of fun' map23 should be fun now :)
        - Players drop backpacks containing their readyweapon and ammo
* various little bugs/ additions that annoyed me:
        - added __djgpp_nearptr_enable(); to i_net.c to make multiplayer
                work
        - chaingun sergeants shooting with the shotgun sound
        - fast doors bouncing off your head with the slow sound
        - translucent gun flashes
        - translucency set to 50% not 66% (?)
        - you can now specify things to face any angle, it is not rounded
                to the nearest 45 degrees (untested)
* console (only at i/o stage so far, no commands)
* looking up/down, shooting up/down (will add 'allowmlook' server console
        option)

A glance at what is to come:

* Port sersetup/ipxsetup to djgpp and integrate into exe.
* A working console
* Console commands executed from linedefs as in the original sfdoom.
* olo support.  par time, level name, finale text in 'map01' or 'e1m1'
        level marker
* Quake-style 'start map'
* A new hud?

I don't plan to put coloured lighting in again. The main rendering routines
are in assembly, which I can't do. Also, the original sfdoom coloured
lighting was terribly bug-ridden and when it worked, the sprites looked
crap.

--
Simon Howard 'Fraggle'
http://fraggle.tsx.org/
sfraggle@sfrag.free-online.co.uk
--
